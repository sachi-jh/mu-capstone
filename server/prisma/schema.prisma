// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email String  @unique
  name  String
  image_url String @default("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/2048px-Default_pfp.svg.png")
  posts Post[]
  trips Trip[]
  wishlist Park[] @relation("Wishlist")
  visited Park[]  @relation("Visited")
  authUserId  String   @unique @db.Uuid
  reviews Review[]
}

model Post {
  id        Int     @id @default(autoincrement())
  text   String
  author    User   @relation(fields: [authorId], references: [id])
  authorId  Int
  location  Park  @relation(fields: [locationId], references: [id])
  locationId Int
  image_url String?
}

model Trip {
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  name String
  startDate DateTime
  endDate DateTime
  days Int
  location Park @relation(fields: [locationId], references: [id])
  locationId Int
  thingsToDo ThingstodoOnTrips[]
}

model Park {
  id Int @id @default(autoincrement())
  npsParkCode String @unique
  name String
  address String?
  state String
  description String
  wishlistUsers User[] @relation("Wishlist")
  visitedUsers User[] @relation("Visited")
  posts Post[]
  trips Trip[]
  image_url String[]
  thingsToDo Thingstodo[]
  region String
  activity_types String[]
  season String[]
  duration String[]
  spring_avg_visitors Int
  summer_avg_visitors Int
  fall_avg_visitors Int
  winter_avg_visitors Int
  avgRating Float?
  reviews Review[]
}

model Thingstodo {
  id Int @id @default(autoincrement())
  name String
  location Park @relation(fields: [locationId], references: [id])
  locationId Int
  description String
  trips ThingstodoOnTrips[]
  activity_type String
  durationMins  Int
  timeOfDay String[]
  season String[]
  latitude Float
  longitude Float

}

model ThingstodoOnTrips {
  trip Trip @relation(fields: [tripId], references: [id])
  tripId Int
  thingstodo Thingstodo @relation(fields: [thingstodoId], references: [id])
  thingstodoId Int
  tripDay Int
  startTime Int
  endTime Int
  durationMins Int

  id Int @id @default(autoincrement())
}

model ActivityType {
  id Int @id @default(autoincrement())
  name String @unique
}

model Review {
  location Park @relation(fields: [locationId], references: [id])
  locationId Int
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  rating Int
  review String?

  @@id([locationId, authorId])
}
